wrapping
    entire module
        what if it contains classes also?
    entire class
    import inspect
    

deferred receives _Callable, call previous callbacks anyway?

subclass _Callable to _Symbol
    assignment to Symbol
    
    how to deal with getattr? cases...
        X.groupby([...]) ---- (X) => getattr(X, 'groupby')([...])

        X.a ---- (X) => getattr(X, 'a')

        the problem is that you don't know if groupby should be called, or
        if a should be callable
    
    Calling a symbol may need to act on..
        A tuple of (f, left, right), where all are functions
        A Symbol (alternatively could change Symbol.__call__ to never allow a symbol)
        A function object, F

        A big theme seems to be encoding vs decoding object calls

        f(left, right) could be any combination of symbol, deferred, F, function
    

test on DataFrame
